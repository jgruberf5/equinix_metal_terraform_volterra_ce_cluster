#cloud-config
package_update: true
package_upgrade: true
packages:
  - qemu-kvm
  - libvirt
  - virt-install
  - bridge-utils
  - genisoimage
  - syslinux
  - iptables-services
package_reboot_if_required: true
write_files:
  - path: /etc/ce_userdata_template.yaml
    permission: '0644'
    content: |
      #cloud-config
      chpasswd:
        expire: false
        list: |
          admin:${admin_password}
      write_files:
        - path: /etc/vpm/basic-auth.json
          permissions: '0644'
          content: |
            [{"username": "admin", "password": "${admin_password}"}]
        - path: /etc/vpm/config.yaml
          permissions: '0644'
          content: |
            Kubernetes:
              EtcdUseTLS: true
              Server: vip
            Vpm:
              ClusterName: ${cluster_name}
              CertifiedHardware: ${certified_hardware}
              ClusterType: ce
              Config: /etc/vpm/config.yaml
              PrivateNIC: eth0
              InsideNIC: ${inside_nic}
              Latitude: ${latitude}
              Longitude: ${longitude}
              MauriceEndpoint: https://register.ves.volterra.io
              MauricePrivateEndpoint: https://register-tls.ves.volterra.io
              Token: ${site_token}
              Labels:
                provider: Equinix
                region: ${region}
                hw-model: ${profile}
                hw-vendor: equinix-metal
                ves.io/fleet: ${fleet_label}
      bootcmd:
        - /usr/bin/touch /etc/vpm/passwdchanged
  - path: /etc/ce_domain_template.xml
    permission: '0644'
    content: |
      <domain type='kvm'>
        <name>__CE_HOSTNAME__</name>
        <uuid>__SERIAL_NUMBER__</uuid>
        <metadata>
          <libosinfo:libosinfo xmlns:libosinfo="http://libosinfo.org/xmlns/libvirt/domain/1.0">
            <libosinfo:os id="http://centos.org/centos/7.0"/>
          </libosinfo:libosinfo>
        </metadata>
        <memory unit='KiB'>${ram}</memory>
        <currentMemory unit='KiB'>${ram}</currentMemory>
         <vcpu placement='static'>${vcpus}</vcpu>
        <os>
          <type arch='x86_64' machine='pc-i440fx-rhel7.0.0'>hvm</type>
          <boot dev='hd'/>
        </os>
        <features>
          <acpi/>
          <apic/>
        </features>
        <cpu mode='host-model' check='none'/>
        <clock offset='utc'>
          <timer name='rtc' tickpolicy='catchup'/>
          <timer name='pit' tickpolicy='delay'/>
          <timer name='hpet' present='no'/>
        </clock>
        <on_poweroff>destroy</on_poweroff>
        <on_reboot>restart</on_reboot>
        <on_crash>restart</on_crash>
        <pm>
          <suspend-to-mem enabled='no'/>
          <suspend-to-disk enabled='no'/>
        </pm>
        <devices>
          <emulator>/usr/libexec/qemu-kvm</emulator>
          <disk type='file' device='disk'>
            <driver name='qemu' type='qcow2'/>
            <source file='__CE_DISK_IMAGE__'/>
            <target dev='vda' bus='virtio'/>
            <address type='pci' domain='0x0000' bus='0x00' slot='0x07' function='0x0'/>
          </disk>
          <disk type='file' device='disk'>
            <driver name='qemu' type='raw'/>
            <source file='__CE_CLOUDINIT_ISO__'/>
            <target dev='vdb' bus='virtio'/>
            <address type='pci' domain='0x0000' bus='0x00' slot='0x00' function='0x0'/>
          </disk>
          <controller type='usb' index='0' model='ich9-ehci1'>
            <address type='pci' domain='0x0000' bus='0x00' slot='0x05' function='0x7'/>
          </controller>
          <controller type='usb' index='0' model='ich9-uhci1'>
            <master startport='0'/>
            <address type='pci' domain='0x0000' bus='0x00' slot='0x05' function='0x0' multifunction='on'/>
          </controller>
          <controller type='usb' index='0' model='ich9-uhci2'>
            <master startport='2'/>
            <address type='pci' domain='0x0000' bus='0x00' slot='0x05' function='0x1'/>
          </controller>
          <controller type='usb' index='0' model='ich9-uhci3'>
            <master startport='4'/>
            <address type='pci' domain='0x0000' bus='0x00' slot='0x05' function='0x2'/>
          </controller>
          <controller type='pci' index='0' model='pci-root'/>
          <controller type='ide' index='0'>
            <address type='pci' domain='0x0000' bus='0x00' slot='0x01' function='0x1'/>
          </controller>
          <controller type='virtio-serial' index='0'>
            <address type='pci' domain='0x0000' bus='0x00' slot='0x06' function='0x0'/>
          </controller>
          <interface type='bridge'>
            <mac address='__EXTERNAL_MAC_ADDRESS__'/>
            <source bridge='__EXTERNAL_BRIDGE_NAME__'/>
            <model type='virtio'/>
            <driver name='vhost' queues='__VIRTIO_NIC_QUEUES__'/>
            <address type='pci' domain='0x0000' bus='0x00' slot='0x03' function='0x0'/>
          </interface>
          <interface type='bridge'>
            <mac address='__INTERNAL_MAC_ADDRESS__'/>
            <source bridge='__INTERNAL_BRIDGE_NAME__'/>
            <model type='virtio'/>
            <driver name='vhost' queues='__VIRTIO_NIC_QUEUES__'/>
            <address type='pci' domain='0x0000' bus='0x00' slot='0x04' function='0x0'/>
          </interface>
          <serial type='pty'>
            <target type='isa-serial' port='0'>
              <model name='isa-serial'/>
            </target>
          </serial>
          <console type='pty'>
            <target type='serial' port='0'/>
          </console>
          <channel type='unix'>
            <target type='virtio' name='org.qemu.guest_agent.0'/>
            <address type='virtio-serial' controller='0' bus='0' port='1'/>
          </channel>
          <channel type='spicevmc'>
            <target type='virtio' name='com.redhat.spice.0'/>
            <address type='virtio-serial' controller='0' bus='0' port='2'/>
          </channel>
          <input type='mouse' bus='ps2'/>
          <input type='keyboard' bus='ps2'/>
          <graphics type='spice' autoport='yes'>
            <listen type='address'/>
          </graphics>
          <video>
            <model type='qxl' ram='65536' vram='65536' vgamem='16384' heads='1' primary='yes'/>
            <address type='pci' domain='0x0000' bus='0x00' slot='0x02' function='0x0'/>
          </video>
          <redirdev bus='usb' type='spicevmc'>
            <address type='usb' bus='0' port='1'/>
          </redirdev>
          <redirdev bus='usb' type='spicevmc'>
            <address type='usb' bus='0' port='2'/>
          </redirdev>
          <memballoon model='virtio'>
            <address type='pci' domain='0x0000' bus='0x00' slot='0x09' function='0x0'/>
          </memballoon>
          <rng model='virtio'>
            <backend model='random'>/dev/urandom</backend>
            <address type='pci' domain='0x0000' bus='0x00' slot='0x10' function='0x0'/>
          </rng>
        </devices>
      </domain>
  - path: /sbin/create_ce_from_metal.sh
    permission: '0744'
    content: |
      #!/bin/bash
      function print_ip_catalog() {
        local sub=$(echo $1|cut -d'/' -f1)
        local prefix=$(echo $1|cut -d'/' -f2)
        local mask=$(( 1 << ( 32 - $prefix )))
        local offset=0
        if [[ ! -z "$2" ]]; then
            offset=$2
        fi
        local number_of_addresses=$mask
        if [[ ! -z "$3" ]]; then
            let number_of_addresses=$3+offset
        fi
        local OLDIFS="$IFS"
        IFS="."
        set -- $sub
        ips=$((0x$(printf "%02x%02x%02x%02x\n" $1 $2 $3 $4)))
        IFS="$OLDIFS"
        for (( n=$offset; n<$mask; n++ ))
        {
          val=$((ips|n))
          if [ $n -lt $number_of_addresses ]
          then
            printf "%d.%d.%d.%d\n" \
              $(( (val >> 24) & 255 )) \
              $(( (val >> 16) & 255 )) \
              $(( (val >> 8 ) & 255 )) \
              $(( (val) & 255 ))
          fi
        }
      }
      function generate_MAC_from_IP() {
        ip_hex=$(gethostip -x $1)
        echo 02:01:$(echo $ip_hex|sed 's/.\{2\}/&\:/g;s/\:$//'| tr '[:upper:]' '[:lower:]')
      }
      function deploy_dhcp_services() {
        local name=$1
        local server_address=$2
        local addresses_catalog=$3
        # create service configuration
        mkdir -p /etc/dnsmasq-$name
        echo "strict-order" > /etc/dnsmasq-$name/dnsmasq.conf
        echo "pid-file=/var/run/dnsmasq-$name.pid" >> /etc/dnsmasq-$name/dnsmasq.conf
        echo "except-interface=lo" >> /etc/dnsmasq-$name/dnsmasq.conf
        echo "bind-dynamic" >> /etc/dnsmasq-$name/dnsmasq.conf
        echo "interface=$name" >> /etc/dnsmasq-$name/dnsmasq.conf
        echo "dhcp-range=$server_address,static" >> /etc/dnsmasq-$name/dnsmasq.conf
        echo "dhcp-no-override" >> /etc/dnsmasq-$name/dnsmasq.conf
        echo "dhcp-authoritative" >> /etc/dnsmasq-$name/dnsmasq.conf
        echo "dhcp-hostsfile=/etc/dnsmasq-$name/dhcp.ethers" >> /etc/dnsmasq-$name/dnsmasq.conf
        echo "dhcp-optsfile=/etc/dnsmasq-$name/dhcp.opts" >> /etc/dnsmasq-$name/dnsmasq.conf
        echo "addn-hosts=/etc/dnsmasq-$name/dhcp.hosts" >> /etc/dnsmasq-$name/dnsmasq.conf
        echo "dhcp-leasefile=/etc/dnsmasq-$name/dnsmasq.leases" >> /etc/dnsmasq-$name/dnsmasq.conf
        if [[ ! -z "$catalog_file" ]];
        then
          for h in $(seq ${host_count})
          do            
            let h_ip_index=($h-1)*${ce_count}+$h+1
            host_ip_address=$(tail -n +$h_ip_index $addresses_catalog | head -n 1)
            host_hostname="${site_name}-metal-$h"
            echo "$host_ip_address $host_hostname" >> /etc/dnsmasq-$name/dhcp.hosts
            echo "tag:$host_hostname,option:dns-server,8.8.8.8,8.8.4.4" >> /etc/dnsmasq-$name/dhcp.opts
            echo "tag:$host_hostname,option:router,$host_ip_address" >> /etc/dnsmasq-$name/dhcp.opts
            for k in $(seq ${ce_count})
            do
              let ce_address_index=$h_ip_index+$k
              ce_ip_address=$(tail -n +$ce_address_index $addresses_catalog | head -n1)
              let ce_index=($h-1)*${ce_count}+$k
              ce_hostname=${site_name}-ce-$ce_index
              local generated_mac=$(generate_MAC_from_IP $ce_ip_address)
              echo "$generated_mac,set:$host_hostname,$ce_ip_address" >> /etc/dnsmasq-$name/dhcp.ethers
              echo "$ce_hostname $ce_ip_address" >> /etc/dnsmasq-$name/dhcp.hosts
            done
          done
        fi
        # create systemd service
        echo "[Unit]" >> /usr/lib/systemd/system/dnsmasq-$name.service
        echo "Description=dnsmasq service for bridge $name" >> /usr/lib/systemd/system/dnsmasq-$name.service
        echo "After=network.target" >> /usr/lib/systemd/system/dnsmasq-$name.service
        echo "[Service]" >> /usr/lib/systemd/system/dnsmasq-$name.service
        echo "ExecStart=/usr/sbin/dnsmasq -d -C /etc/dnsmasq-$name/dnsmasq.conf" >> /usr/lib/systemd/system/dnsmasq-$name.service
        echo "Restart=always" >> /usr/lib/systemd/system/dnsmasq-$name.service
        echo "[Install]" >> /usr/lib/systemd/system/dnsmasq-$name.service
        echo "WantedBy=multi-user.target" >> /usr/lib/systemd/system/dnsmasq-$name.service
        ln -s /usr/lib/systemd/system/dnsmasq-$name.service /etc/systemd/system/multi-user.target.wants/dnsmasq-$name.service
        systemctl enable dnsmasq-$name.service
        systemctl start dnsmasq-$name.service
      }
      function create_vlan_bridge() {
        local interface=$1
        local vlan_id=$2
        local ip_address=$3
        local ip_prefix=$4
        local name=$5
        local catalog_file=$6
        # VLAN interface
        echo "DEVICE=$interface.$vlan_id" > /etc/sysconfig/network-scripts/ifcfg-$interface.$vlan_id
        echo "BOOTPROTO=none" >> /etc/sysconfig/network-scripts/ifcfg-$interface.$vlan_id
        echo "ONBOOT=yes" >> /etc/sysconfig/network-scripts/ifcfg-$interface.$vlan_id
        echo "VLAN=yes" >> /etc/sysconfig/network-scripts/ifcfg-$interface.$vlan_id
        echo "BRIDGE=$name" >> /etc/sysconfig/network-scripts/ifcfg-$interface.$vlan_id
        echo "NM_CONTROLLED=no" >> /etc/sysconfig/network-scripts/ifcfg-$interface.$vlan_id
        # Bridge
        echo "DEVICE=$name" > /etc/sysconfig/network-scripts/ifcfg-$name
        echo "TYPE=Bridge" >> /etc/sysconfig/network-scripts/ifcfg-$name
        echo "ONBOOT=yes" >> /etc/sysconfig/network-scripts/ifcfg-$name
        echo "BOOTPROTO=static" >> /etc/sysconfig/network-scripts/ifcfg-$name
        echo "IPADDR=$ip_address" >> /etc/sysconfig/network-scripts/ifcfg-$name
        echo "PREFIX=$ip_prefix" >> /etc/sysconfig/network-scripts/ifcfg-$name
        echo "NM_CONTROLLED=no" >> /etc/sysconfig/network-scripts/ifcfg-$name
        systemctl restart network
        deploy_dhcp_services $name $ip_address $catalog_file 
      }
      #### HOST LEVEL CONFIGURATION ####
      # Load netstack modules
      modprobe 8021q
      modprobe bridge
      modprobe ip_tables
      echo "8021q" >> /etc/modules-load.d/8021q.conf
      echo "bridge" >> /etc/modules-load.d/br_netfilter.conf
      echo "ip_tables" >> /etc/modules-load.d/iptables.conf
      # allow L2 broadcasts on the bridges
      echo net.bridge.bridge-nf-call-ip6tables = 1 >> /etc/sysctl.conf
      echo net.bridge.bridge-nf-call-iptables = 1 >> /etc/sysctl.conf
      echo net.bridge.bridge-nf-call-arptables = 1 >> /etc/sysctl.conf
      # enable L3 routing
      echo 1 > /proc/sys/net/ipv4/ip_forward
      echo net.ipv4.ip_forward=1 >> /etc/sysctl.conf
      # reset sysctl registers
      sysctl -p /etc/sysctl.conf
      # This host's L3 placement in the deployment
      let ip_hosts=${host_count}*${ce_count}+${host_count}+1
      # What is this host index in the global catalogs
      let ip_index=(${host_index}-1)*${ce_count}+${host_index}+1
      # Generate global external IP address catalog
      print_ip_catalog ${external_cidr} 1 $ip_hosts > /etc/ce_external_ip_addresses
      external_gw=$(print_ip_catalog ${external_cidr} 1 1)
      external_netmask=$(ipcalc ${external_cidr} -m|cut -d'=' -f2)
      external_prefix=$(ipcalc ${external_cidr} -p|cut -d'=' -f2)
      external_host_ip=$(tail -n +$ip_index /etc/ce_external_ip_addresses | head -n 1)
      # Generate host eip catalog
      print_ip_catalog ${eips_cidr} > /etc/ce_eip_addresses
      # Generate global internal IP address catalog
      print_ip_catalog ${internal_cidr} 1 $ip_hosts > /etc/ce_internal_ip_addresses
      internal_gw=$(print_ip_catalog ${internal_cidr} 1 1)
      internal_netmask=$(ipcalc ${internal_cidr} -m|cut -d'=' -f2)
      internal_prefix=$(ipcalc ${internal_cidr} -p|cut -d'=' -f2)
      internal_host_ip=$(tail -n +$ip_index /etc/ce_internal_ip_addresses | head -n 1)
      ## remove default libvirt network configurations
      systemctl enable libvirt-guests.service
      systemctl start libvirt-guests.service
      virsh net-destroy default
      virsh net-undefine default
      systemctl restart libvirtd
      #### External Network ####
      create_vlan_bridge bond0 ${external_vlan_id} $external_host_ip $external_prefix br-external /etc/ce_external_ip_addresses        
      #### Internal Network ###
      create_vlan_bridge bond0 ${internal_vlan_id} $internal_host_ip $internal_prefix br-internal /etc/ce_internal_ip_addresses
      ### Download CE image
      curl --retry 999 --retry-max-time 0 -o /var/lib/libvirt/images/ce.qcow2 ${ce_download_url}
      #### GUEST LEVEL CONFIGURATION ####
      for i in $(seq ${ce_count})
      do
          # get the IP addesses for the CE
          let ce_address_index=$ip_index+$i
          # get an EIP for the CE
          let eip_index=$i+1
          ce_eip=$(tail -n +$eip_index /etc/ce_eip_addresses | head -n1)
          # defined the network settings for the CE
          ce_external_ip_address=$(tail -n +$ce_address_index /etc/ce_external_ip_addresses | head -n1)
          ce_external_ip_cidr=$ce_external_ip_address/$external_prefix
          ce_external_ip_cidr=$(echo "$ce_external_ip_cidr"| sed 's/\//\\\//g')
          ce_external_mac_address=$(generate_MAC_from_IP $ce_external_ip_address)
          ce_internal_ip_address=$(tail -n +$ce_address_index /etc/ce_internal_ip_addresses | head -n1)
          ce_internal_ip_cidr=$ce_internal_ip_address/$internal_prefix
          ce_internal_ip_cidr=$(echo "$ce_internal_ip_cidr"| sed 's/\//\\\//g')
          ce_internal_mac_address=$(generate_MAC_from_IP $ce_internal_ip_address)
          # make configuration directory for the CE cloudinit and libvirt domain declarations
          mkdir -p /usr/src/ce_$i
          echo "EXTERNAL_INTERFACE" > /usr/src/ce_$i/ce_$i.netcfg
          echo $ce_external_mac_address >> /usr/src/ce_$i/ce_$i.netcfg
          echo $ce_external_ip_address >> /usr/src/ce_$i/ce_$i.netcfg
          echo $ce_external_ip_cidr >> /usr/src/ce_$i/ce_$i.netcfg
          echo "INTERNAL_INTERFACE"
          echo $ce_internal_mac_address >> /usr/src/ce_$i/ce_$i.netcfg
          echo $ce_internal_ip_address >> /usr/src/ce_$i/ce_$i.netcfg
          echo $ce_internal_ip_cidr >> /usr/src/ce_$i/ce_$i.netcfg
          # guest libvirt domain XML
          instance_serial_number=$(uuidgen)
          cp /etc/ce_domain_template.xml /usr/src/ce_$i/ce_$i.xml
          cp /var/lib/libvirt/images/ce.qcow2 /var/lib/libvirt/images/ce_$i.qcow2
          let ce_index=(${host_index}-1)*${ce_count}+$i
          ce_hostname="${site_name}-ce-$ce_index"
          # libvirt domain XML template population
          sed -i -e "s/__SERIAL_NUMBER__/$instance_serial_number/g" /usr/src/ce_$i/ce_$i.xml
          sed -i -e "s/__EXTERNAL_MAC_ADDRESS__/$ce_external_mac_address/g" /usr/src/ce_$i/ce_$i.xml
          sed -i -e "s/__EXTERNAL_BRIDGE_NAME__/br-external/g" /usr/src/ce_$i/ce_$i.xml
          sed -i -e "s/__INTERNAL_MAC_ADDRESS__/$ce_internal_mac_address/g" /usr/src/ce_$i/ce_$i.xml
          sed -i -e "s/__INTERNAL_BRIDGE_NAME__/br-internal/g" /usr/src/ce_$i/ce_$i.xml
          sed -i -e "s/__VIRTIO_NIC_QUEUES__/2/g" /usr/src/ce_$i/ce_$i.xml
          sed -i -e "s/__CE_DISK_IMAGE__/\/var\/lib\/libvirt\/images\/ce_$i\.qcow2/g" /usr/src/ce_$i/ce_$i.xml
          sed -i -e "s/__CE_CLOUDINIT_ISO__/\/usr\/src\/ce_$i\/cidata.iso/g" /usr/src/ce_$i/ce_$i.xml
          sed -i -e "s/__CE_HOSTNAME__/$ce_hostname/g" /usr/src/ce_$i/ce_$i.xml
          # cloudinit template population
          echo "instance_id: $instance_serial_number" > /usr/src/ce_$i/meta-data
          echo "local-hostname: $ce_hostname" >> /usr/src/ce_$i/meta-data
          cp /etc/ce_userdata_template.yaml /usr/src/ce_$i/user-data
          # sed -i -e "s/__CE_HOSTNAME__/$ce_hostname/g" /usr/src/ce_$i/user-data
          # sed -i -e "s/__ETH0_IP_CIDR__/$ce_external_ip_cidr/g" /usr/src/ce_$i/user-data
          # sed -i -e "s/__ETH0_GATEWAY__/$external_host_ip/g" /usr/src/ce_$i/user-data
          # sed -i -e "s/__ETH1_IP_CIDR__/$ce_internal_ip_cidr/g" /usr/src/ce_$i/user-data
          # sed -i -e "s/__ETH1_GATEWAY__/$internal_host_ip/g" /usr/src/ce_$i/user-data
          # build the cloudinit config disk ISO
          cd /usr/src/ce_$i/
          genisoimage -output cidata.iso -volid cidata -joliet -rock user-data meta-data
          # define and start the CE
          virsh define /usr/src/ce_$i/ce_$i.xml
          virsh start $ce_hostname
          virsh autostart $ce_hostname
          # add EIP NAT
          iptables -t nat -A POSTROUTING -s $ce_external_ip_address -j SNAT --to-source $ce_eip
          iptables -t nat -A PREROUTING -i bond0 -d $ce_eip -j DNAT --to-destination $ce_external_ip_address
          iptables -A FORWARD -s $ce_eip -j ACCEPT
          iptables -A FORWARD -d $ce_external_ip_address -j ACCEPT
      done
      /usr/libexec/iptables/iptables.init save
      # restart dnsmasq services in case they started before the bridges were ready
      systemctl restart dnsmasq-br-external.service
      systemctl restart dnsmasq-br-internal.service
runcmd:
  - bash /sbin/create_ce_from_metal.sh